#set($basePackage = $metadata.getGroupId() + "." + $domain.getModule())
#set($groupId = $basePackage + ".web.controller")
#set($domainName = $domain.getName())
#set($repositoryName = $domainName + "Repository")
#set($searchFormName = $domainName + "SearchForm")
#set($specificationName = $domainName + "Specifications")
#set($repositoryBeanName = $StringUtils.uncapitalize($repositoryName))
#set($domainClass = $basePackage + ".core." + $domainName)
#set($repositoryClass = $basePackage + ".core.repository." + $repositoryName)
#set($searchFormClass = $basePackage + ".web.form." + $searchFormName)
#set($specificationClass = $basePackage + ".web.form." + $specificationName)
#set($baseViewUrl = $domain.getModule() + "/" + $domainName)
#set($baseUrl = "/" + $baseViewUrl)
#set($methodSpecification = $specificationName + ".search(searchForm)")
#set($methodSearch = $repositoryBeanName + ".findAll(" + $methodSpecification + ", pageable)")
#set($methodAdd = $repositoryBeanName + ".save(domain)")
#set($methodDelete = $repositoryBeanName + ".delete(id)")
#set($methodFindOne = $repositoryBeanName + ".findOne(id)")
#set($searchFormClassName = $searchFormName + ".class")
package $groupId;

import $domainClass;
import $repositoryClass;
import $searchFormClass;
import $specificationClass;
import com.yqboots.project.web.WebKeys;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@Controller
@RequestMapping(value = "$baseUrl")
@SessionAttributes(names = {WebKeys.SEARCH_FORM}, types = {$searchFormClassName})
public class MenuItemController {
    private static final String REDIRECT_VIEW_PATH = "redirect:$baseUrl";
    private static final String VIEW_HOME = "$baseViewUrl/index";
    private static final String VIEW_FORM = "$baseViewUrl/form";

    @Autowired
    private $repositoryName $repositoryBeanName;

    @ModelAttribute(WebKeys.SEARCH_FORM)
    protected $searchFormName searchForm() {
        return new $searchFormName();
    }

    @RequestMapping(method = {RequestMethod.GET, RequestMethod.POST})
    public String list(@ModelAttribute(WebKeys.SEARCH_FORM) final $searchFormName searchForm,
                       @PageableDefault final Pageable pageable,
                       final ModelMap model) {
        model.addAttribute(WebKeys.PAGE, $methodSearch);
        return VIEW_HOME;
    }

    @RequestMapping(params = {WebKeys.ACTION_NEW}, method = RequestMethod.GET)
    public String preAdd(final ModelMap model) {
        model.addAttribute(WebKeys.MODEL, new MenuItem());
        return VIEW_FORM;
    }

    @RequestMapping(params = {WebKeys.ID, WebKeys.ACTION_UPDATE}, method = RequestMethod.GET)
    public String preUpdate(@RequestParam final Long id, final ModelMap model) {
        model.addAttribute(WebKeys.MODEL, $methodFindOne);
        return VIEW_FORM;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    public String update(@Valid @ModelAttribute(WebKeys.MODEL) final $domainName domain,
                         final BindingResult bindingResult,
                         final ModelMap model) {
        if (bindingResult.hasErrors()) {
            return VIEW_FORM;
        }

        $methodAdd;
        model.clear();

        return REDIRECT_VIEW_PATH;
    }

    @RequestMapping(params = {WebKeys.ID, WebKeys.ACTION_DELETE}, method = RequestMethod.GET)
    public String delete(@RequestParam final Long id, final ModelMap model) {
        $methodDelete;
        model.clear();

        return REDIRECT_VIEW_PATH;
    }
}
